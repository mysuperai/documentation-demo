(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{204:function(e,t,r){"use strict";r.d(t,"a",(function(){return l})),r.d(t,"b",(function(){return m}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=a.a.createContext({}),d=function(e){var t=a.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=d(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=d(r),u=n,m=l["".concat(s,".").concat(u)]||l[u]||b[u]||o;return r?a.a.createElement(m,i(i({ref:t},p),{},{components:r})):a.a.createElement(m,i({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var p=2;p<o;p++)s[p]=r[p];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},80:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return s})),r.d(t,"metadata",(function(){return i})),r.d(t,"toc",(function(){return c})),r.d(t,"default",(function(){return d}));var n=r(3),a=r(7),o=(r(0),r(204)),s={sidebar_label:"retry",title:"scrapy.downloadermiddlewares.retry"},i={unversionedId:"scrapy/scrapy/downloadermiddlewares/retry",id:"scrapy/scrapy/downloadermiddlewares/retry",isDocsHomePage:!1,title:"scrapy.downloadermiddlewares.retry",description:"An extension to retry failed requests that are potentially caused by temporary",source:"@site/docs/scrapy/scrapy/downloadermiddlewares/retry.md",sourceDirName:"scrapy/scrapy/downloadermiddlewares",slug:"/scrapy/scrapy/downloadermiddlewares/retry",permalink:"/documentation-demo/docs/scrapy/scrapy/downloadermiddlewares/retry",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/scrapy/scrapy/downloadermiddlewares/retry.md",version:"current",sidebar_label:"retry",frontMatter:{sidebar_label:"retry",title:"scrapy.downloadermiddlewares.retry"},sidebar:"tutorialSidebar",previous:{title:"scrapy.downloadermiddlewares.redirect",permalink:"/documentation-demo/docs/scrapy/scrapy/downloadermiddlewares/redirect"},next:{title:"scrapy.downloadermiddlewares.useragent",permalink:"/documentation-demo/docs/scrapy/scrapy/downloadermiddlewares/useragent"}},c=[],p={toc:c};function d(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"An extension to retry failed requests that are potentially caused by temporary\nproblems such as a connection timeout or HTTP 500 error."),Object(o.b)("p",null,"You can change the behaviour of this middleware by modifing the scraping settings:\nRETRY_TIMES - how many times to retry a failed page\nRETRY_HTTP_CODES - which HTTP response codes to retry"),Object(o.b)("p",null,"Failed pages are collected on the scraping process and rescheduled at the end,\nonce the spider has finished crawling all regular (non failed) pages."),Object(o.b)("h4",{id:"get_retry_request"},"get","_","retry","_","request"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"get_retry_request(request: Request, *, spider: Spider, reason: Union[str, Exception] = 'unspecified', max_retry_times: Optional[int] = None, priority_adjust: Optional[int] = None, logger: Logger = retry_logger, stats_base_key: str = 'retry')\n")),Object(o.b)("p",null,"Returns a new :class:",Object(o.b)("inlineCode",{parentName:"p"},"~scrapy.Request")," object to retry the specified\nrequest, or ",Object(o.b)("inlineCode",{parentName:"p"},"None")," if retries of the specified request have been\nexhausted."),Object(o.b)("p",null,"For example, in a :class:",Object(o.b)("inlineCode",{parentName:"p"},"~scrapy.Spider")," callback, you could use it as\nfollows::"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"def parse(self, response):\n    if not response.text:\n        new_request_or_none = get_retry_request(\n            response.request,\n            spider=self,\n            reason=&#x27;empty&#x27;,\n        )\n        return new_request_or_none\n")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"spider")," is the :class:",Object(o.b)("inlineCode",{parentName:"p"},"~scrapy.Spider")," instance which is asking for the\nretry request. It is used to access the :ref:",Object(o.b)("inlineCode",{parentName:"p"},"settings &lt;topics-settings&gt;"),"\nand :ref:",Object(o.b)("inlineCode",{parentName:"p"},"stats &lt;topics-stats&gt;"),", and to provide extra logging context (see\n:func:",Object(o.b)("inlineCode",{parentName:"p"},"logging.debug"),")."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"reason")," is a string or an :class:",Object(o.b)("inlineCode",{parentName:"p"},"Exception")," object that indicates the\nreason why the request needs to be retried. It is used to name retry stats."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"max_retry_times")," is a number that determines the maximum number of times\nthat ",Object(o.b)("em",{parentName:"p"},"request")," can be retried. If not specified or ",Object(o.b)("inlineCode",{parentName:"p"},"None"),", the number is\nread from the :reqmeta:",Object(o.b)("inlineCode",{parentName:"p"},"max_retry_times")," meta key of the request. If the\n:reqmeta:",Object(o.b)("inlineCode",{parentName:"p"},"max_retry_times")," meta key is not defined or ",Object(o.b)("inlineCode",{parentName:"p"},"None"),", the number\nis read from the :setting:",Object(o.b)("inlineCode",{parentName:"p"},"RETRY_TIMES")," setting."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"priority_adjust")," is a number that determines how the priority of the new\nrequest changes in relation to ",Object(o.b)("em",{parentName:"p"},"request"),". If not specified, the number is\nread from the :setting:",Object(o.b)("inlineCode",{parentName:"p"},"RETRY_PRIORITY_ADJUST")," setting."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"logger")," is the logging.Logger object to be used when logging messages"),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"stats_base_key")," is a string to be used as the base key for the\nretry-related job stats"))}d.isMDXComponent=!0}}]);