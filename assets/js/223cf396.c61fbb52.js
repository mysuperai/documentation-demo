(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{204:function(e,r,t){"use strict";t.d(r,"a",(function(){return p})),t.d(r,"b",(function(){return f}));var a=t(0),n=t.n(a);function l(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function c(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?c(Object(t),!0).forEach((function(r){l(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=n.a.createContext({}),b=function(e){var r=n.a.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=b(e.components);return n.a.createElement(i.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.a.createElement(n.a.Fragment,{},r)}},u=n.a.forwardRef((function(e,r){var t=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),p=b(t),u=a,f=p["".concat(c,".").concat(u)]||p[u]||d[u]||l;return t?n.a.createElement(f,o(o({ref:r},i),{},{components:t})):n.a.createElement(f,o({ref:r},i))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=t.length,c=new Array(l);c[0]=u;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var i=2;i<l;i++)c[i]=t[i];return n.a.createElement.apply(null,c)}return n.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},97:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return c})),t.d(r,"metadata",(function(){return o})),t.d(r,"toc",(function(){return s})),t.d(r,"default",(function(){return b}));var a=t(3),n=t(7),l=(t(0),t(204)),c={sidebar_label:"defer",title:"scrapy.utils.defer"},o={unversionedId:"scrapy/scrapy/utils/defer",id:"scrapy/scrapy/utils/defer",isDocsHomePage:!1,title:"scrapy.utils.defer",description:"Helper functions for dealing with Twisted deferreds",source:"@site/docs/scrapy/scrapy/utils/defer.md",sourceDirName:"scrapy/scrapy/utils",slug:"/scrapy/scrapy/utils/defer",permalink:"/documentation-demo/docs/scrapy/scrapy/utils/defer",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/scrapy/scrapy/utils/defer.md",version:"current",sidebar_label:"defer",frontMatter:{sidebar_label:"defer",title:"scrapy.utils.defer"},sidebar:"tutorialSidebar",previous:{title:"scrapy.utils.decorators",permalink:"/documentation-demo/docs/scrapy/scrapy/utils/decorators"},next:{title:"scrapy.utils.deprecate",permalink:"/documentation-demo/docs/scrapy/scrapy/utils/deprecate"}},s=[],i={toc:s};function b(e){var r=e.components,t=Object(n.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},i,t,{components:r,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Helper functions for dealing with Twisted deferreds"),Object(l.b)("h4",{id:"defer_fail"},"defer","_","fail"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"defer_fail(_failure: Failure) -> Deferred\n")),Object(l.b)("p",null,"Same as twisted.internet.defer.fail but delay calling errback until\nnext reactor loop"),Object(l.b)("p",null,"It delays by 100ms so reactor has a chance to go through readers and writers\nbefore attending pending delayed calls, so do not set delay to zero."),Object(l.b)("h4",{id:"defer_succeed"},"defer","_","succeed"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"defer_succeed(result) -> Deferred\n")),Object(l.b)("p",null,"Same as twisted.internet.defer.succeed but delay calling callback until\nnext reactor loop"),Object(l.b)("p",null,"It delays by 100ms so reactor has a chance to go trough readers and writers\nbefore attending pending delayed calls, so do not set delay to zero."),Object(l.b)("h4",{id:"mustbe_deferred"},"mustbe","_","deferred"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"mustbe_deferred(f: Callable, *args, **kw) -> Deferred\n")),Object(l.b)("p",null,"Same as twisted.internet.defer.maybeDeferred, but delay calling\ncallback/errback to next reactor loop"),Object(l.b)("h4",{id:"parallel"},"parallel"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"parallel(iterable: Iterable, count: int, callable: Callable, *args, **named) -> DeferredList\n")),Object(l.b)("p",null,"Execute a callable over the objects in the given iterable, in parallel,\nusing no more than ",Object(l.b)("inlineCode",{parentName:"p"},"count")," concurrent calls."),Object(l.b)("p",null,"Taken from: ",Object(l.b)("a",{parentName:"p",href:"https://jcalderone.livejournal.com/24285.html"},"https://jcalderone.livejournal.com/24285.html")),Object(l.b)("h4",{id:"process_chain"},"process","_","chain"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"process_chain(callbacks: Iterable[Callable], input, *a, **kw) -> Deferred\n")),Object(l.b)("p",null,"Return a Deferred built by chaining the given callbacks"),Object(l.b)("h4",{id:"process_chain_both"},"process","_","chain","_","both"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"process_chain_both(callbacks: Iterable[Callable], errbacks: Iterable[Callable], input, *a, **kw) -> Deferred\n")),Object(l.b)("p",null,"Return a Deferred built by chaining the given callbacks and errbacks"),Object(l.b)("h4",{id:"process_parallel"},"process","_","parallel"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"process_parallel(callbacks: Iterable[Callable], input, *a, **kw) -> Deferred\n")),Object(l.b)("p",null,"Return a Deferred with the output of all successful calls to the given\ncallbacks"),Object(l.b)("h4",{id:"iter_errback"},"iter","_","errback"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"iter_errback(iterable: Iterable, errback: Callable, *a, **kw) -> Generator\n")),Object(l.b)("p",null,"Wraps an iterable calling an errback if an error is caught while\niterating it."),Object(l.b)("h4",{id:"deferred_from_coro"},"deferred","_","from","_","coro"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"deferred_from_coro(o) -> Any\n")),Object(l.b)("p",null,"Converts a coroutine into a Deferred, or returns the object as is if it isn","'","t a coroutine"),Object(l.b)("h4",{id:"deferred_f_from_coro_f"},"deferred","_","f","_","from","_","coro","_","f"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"deferred_f_from_coro_f(coro_f: Callable[..., Coroutine]) -> Callable\n")),Object(l.b)("p",null,"Converts a coroutine function into a function that returns a Deferred."),Object(l.b)("p",null,"The coroutine function will be called at the time when the wrapper is called. Wrapper args will be passed to it.\nThis is useful for callback chains, as callback functions are called with the previous callback result."),Object(l.b)("h4",{id:"maybedeferred_coro"},"maybeDeferred","_","coro"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"maybeDeferred_coro(f: Callable, *args, **kw) -> Deferred\n")),Object(l.b)("p",null,"Copy of defer.maybeDeferred that also converts coroutines to Deferreds."))}b.isMDXComponent=!0}}]);