(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{101:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return b})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return o}));var a=n(3),i=n(7),r=(n(0),n(204)),l={sidebar_label:"settings",title:"scrapy.settings"},b={unversionedId:"scrapy/scrapy/settings/__init__",id:"scrapy/scrapy/settings/__init__",isDocsHomePage:!1,title:"scrapy.settings",description:"get\\settings\\priority",source:"@site/docs/scrapy/scrapy/settings/__init__.md",sourceDirName:"scrapy/scrapy/settings",slug:"/scrapy/scrapy/settings/__init__",permalink:"/documentation-demo/docs/scrapy/scrapy/settings/__init__",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/scrapy/scrapy/settings/__init__.md",version:"current",sidebar_label:"settings",frontMatter:{sidebar_label:"settings",title:"scrapy.settings"},sidebar:"tutorialSidebar",previous:{title:"scrapy.selector.unified",permalink:"/documentation-demo/docs/scrapy/scrapy/selector/unified"},next:{title:"scrapy.shell",permalink:"/documentation-demo/docs/scrapy/scrapy/shell"}},s=[{value:"SettingsAttribute Objects",id:"settingsattribute-objects",children:[]},{value:"BaseSettings Objects",id:"basesettings-objects",children:[]},{value:"Settings Objects",id:"settings-objects",children:[]}],p={toc:s};function o(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h4",{id:"get_settings_priority"},"get","_","settings","_","priority"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"get_settings_priority(priority)\n")),Object(r.b)("p",null,"Small helper function that looks up a given string priority in the\n:attr:",Object(r.b)("inlineCode",{parentName:"p"},"~scrapy.settings.SETTINGS_PRIORITIES")," dictionary and returns its\nnumerical value, or directly returns a given numerical priority."),Object(r.b)("h2",{id:"settingsattribute-objects"},"SettingsAttribute Objects"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"class SettingsAttribute()\n")),Object(r.b)("p",null,"Class for storing data related to settings attributes."),Object(r.b)("p",null,"This class is intended for internal usage, you should try Settings class\nfor settings configuration, not this one."),Object(r.b)("h4",{id:"set"},"set"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"}," | set(value, priority)\n")),Object(r.b)("p",null,"Sets value if priority is higher or equal than current priority."),Object(r.b)("h2",{id:"basesettings-objects"},"BaseSettings Objects"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"class BaseSettings(MutableMapping)\n")),Object(r.b)("p",null,"Instances of this class behave like dictionaries, but store priorities\nalong with their ",Object(r.b)("inlineCode",{parentName:"p"},"(key, value)")," pairs, and can be frozen (i.e. marked\nimmutable)."),Object(r.b)("p",null,"Key-value entries can be passed on initialization with the ",Object(r.b)("inlineCode",{parentName:"p"},"values"),"\nargument, and they would take the ",Object(r.b)("inlineCode",{parentName:"p"},"priority")," level (unless ",Object(r.b)("inlineCode",{parentName:"p"},"values")," is\nalready an instance of :class:",Object(r.b)("inlineCode",{parentName:"p"},"~scrapy.settings.BaseSettings"),", in which\ncase the existing priority levels will be kept).  If the ",Object(r.b)("inlineCode",{parentName:"p"},"priority"),"\nargument is a string, the priority name will be looked up in\n:attr:",Object(r.b)("inlineCode",{parentName:"p"},"~scrapy.settings.SETTINGS_PRIORITIES"),". Otherwise, a specific integer\nshould be provided."),Object(r.b)("p",null,"Once the object is created, new settings can be loaded or updated with the\n:meth:",Object(r.b)("inlineCode",{parentName:"p"},"~scrapy.settings.BaseSettings.set")," method, and can be accessed with\nthe square bracket notation of dictionaries, or with the\n:meth:",Object(r.b)("inlineCode",{parentName:"p"},"~scrapy.settings.BaseSettings.get")," method of the instance and its\nvalue conversion variants. When requesting a stored key, the value with the\nhighest priority will be retrieved."),Object(r.b)("h4",{id:"get"},"get"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"}," | get(name, default=None)\n")),Object(r.b)("p",null,"Get a setting value without affecting its original type."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"name"),": the setting name\n:type name: str")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"default"),": the value to return if no setting is found\n:type default: object"))),Object(r.b)("h4",{id:"getbool"},"getbool"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"}," | getbool(name, default=False)\n")),Object(r.b)("p",null,"Get a setting value as a boolean."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"1"),", ",Object(r.b)("inlineCode",{parentName:"p"},"&#x27;1&#x27;"),", `True",Object(r.b)("inlineCode",{parentName:"p"},"and"),"'","True","'",Object(r.b)("inlineCode",{parentName:"p"},"return"),"True",Object(r.b)("inlineCode",{parentName:"p"},",\nwhile "),"0",Object(r.b)("inlineCode",{parentName:"p"},", "),"'","0","'",Object(r.b)("inlineCode",{parentName:"p"},", "),"False",Object(r.b)("inlineCode",{parentName:"p"},", "),"'","False","'",Object(r.b)("inlineCode",{parentName:"p"},"and"),"None",Object(r.b)("inlineCode",{parentName:"p"},"return"),"False``."),Object(r.b)("p",null,"For example, settings populated through environment variables set to\n",Object(r.b)("inlineCode",{parentName:"p"},"&#x27;0&#x27;")," will return ",Object(r.b)("inlineCode",{parentName:"p"},"False")," when using this method."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"name"),": the setting name\n:type name: str")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"default"),": the value to return if no setting is found\n:type default: object"))),Object(r.b)("h4",{id:"getint"},"getint"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"}," | getint(name, default=0)\n")),Object(r.b)("p",null,"Get a setting value as an int."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"name"),": the setting name\n:type name: str")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"default"),": the value to return if no setting is found\n:type default: object"))),Object(r.b)("h4",{id:"getfloat"},"getfloat"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"}," | getfloat(name, default=0.0)\n")),Object(r.b)("p",null,"Get a setting value as a float."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"name"),": the setting name\n:type name: str")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"default"),": the value to return if no setting is found\n:type default: object"))),Object(r.b)("h4",{id:"getlist"},"getlist"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"}," | getlist(name, default=None)\n")),Object(r.b)("p",null,"Get a setting value as a list. If the setting original type is a list, a\ncopy of it will be returned. If it","'","s a string it will be split by ",'"',",",'"',"."),Object(r.b)("p",null,"For example, settings populated through environment variables set to\n",Object(r.b)("inlineCode",{parentName:"p"},"&#x27;one,two&#x27;")," will return a list ","['","one","'",", ","'","two","']"," when using this method."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"name"),": the setting name\n:type name: str")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"default"),": the value to return if no setting is found\n:type default: object"))),Object(r.b)("h4",{id:"getdict"},"getdict"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"}," | getdict(name, default=None)\n")),Object(r.b)("p",null,"Get a setting value as a dictionary. If the setting original type is a\ndictionary, a copy of it will be returned. If it is a string it will be\nevaluated as a JSON dictionary. In the case that it is a\n:class:",Object(r.b)("inlineCode",{parentName:"p"},"~scrapy.settings.BaseSettings")," instance itself, it will be\nconverted to a dictionary, containing all its current settings values\nas they would be returned by :meth:",Object(r.b)("inlineCode",{parentName:"p"},"~scrapy.settings.BaseSettings.get"),",\nand losing all information about priority and mutability."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"name"),": the setting name\n:type name: str")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"default"),": the value to return if no setting is found\n:type default: object"))),Object(r.b)("h4",{id:"getwithbase"},"getwithbase"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"}," | getwithbase(name)\n")),Object(r.b)("p",null,"Get a composition of a dictionary-like setting and its ",Object(r.b)("inlineCode",{parentName:"p"},"_BASE"),"\ncounterpart."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"name"),": name of the dictionary-like setting\n:type name: str")),Object(r.b)("h4",{id:"getpriority"},"getpriority"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"}," | getpriority(name)\n")),Object(r.b)("p",null,"Return the current numerical priority value of a setting, or ",Object(r.b)("inlineCode",{parentName:"p"},"None")," if\nthe given ",Object(r.b)("inlineCode",{parentName:"p"},"name")," does not exist."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"name"),": the setting name\n:type name: str")),Object(r.b)("h4",{id:"maxpriority"},"maxpriority"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"}," | maxpriority()\n")),Object(r.b)("p",null,"Return the numerical value of the highest priority present throughout\nall settings, or the numerical value for ",Object(r.b)("inlineCode",{parentName:"p"},"default")," from\n:attr:",Object(r.b)("inlineCode",{parentName:"p"},"~scrapy.settings.SETTINGS_PRIORITIES")," if there are no settings\nstored."),Object(r.b)("h4",{id:"set-1"},"set"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"}," | set(name, value, priority='project')\n")),Object(r.b)("p",null,"Store a key/value attribute with a given priority."),Object(r.b)("p",null,"Settings should be populated ",Object(r.b)("em",{parentName:"p"},"before")," configuring the Crawler object\n(through the :meth:",Object(r.b)("inlineCode",{parentName:"p"},"~scrapy.crawler.Crawler.configure")," method),\notherwise they won","'","t have any effect."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"name"),": the setting name\n:type name: str")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"value"),": the value to associate with the setting\n:type value: object")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"priority"),": the priority of the setting. Should be a key of\n:attr:",Object(r.b)("inlineCode",{parentName:"p"},"~scrapy.settings.SETTINGS_PRIORITIES")," or an integer\n:type priority: str or int"))),Object(r.b)("h4",{id:"setmodule"},"setmodule"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"}," | setmodule(module, priority='project')\n")),Object(r.b)("p",null,"Store settings from a module with a given priority."),Object(r.b)("p",null,"This is a helper function that calls\n:meth:",Object(r.b)("inlineCode",{parentName:"p"},"~scrapy.settings.BaseSettings.set")," for every globally declared\nuppercase variable of ",Object(r.b)("inlineCode",{parentName:"p"},"module")," with the provided ",Object(r.b)("inlineCode",{parentName:"p"},"priority"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"module"),": the module or the path of the module\n:type module: types.ModuleType or str")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"priority"),": the priority of the settings. Should be a key of\n:attr:",Object(r.b)("inlineCode",{parentName:"p"},"~scrapy.settings.SETTINGS_PRIORITIES")," or an integer\n:type priority: str or int"))),Object(r.b)("h4",{id:"update"},"update"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"}," | update(values, priority='project')\n")),Object(r.b)("p",null,"Store key/value pairs with a given priority."),Object(r.b)("p",null,"This is a helper function that calls\n:meth:",Object(r.b)("inlineCode",{parentName:"p"},"~scrapy.settings.BaseSettings.set")," for every item of ",Object(r.b)("inlineCode",{parentName:"p"},"values"),"\nwith the provided ",Object(r.b)("inlineCode",{parentName:"p"},"priority"),"."),Object(r.b)("p",null,"If ",Object(r.b)("inlineCode",{parentName:"p"},"values")," is a string, it is assumed to be JSON-encoded and parsed\ninto a dict with ",Object(r.b)("inlineCode",{parentName:"p"},"json.loads()")," first. If it is a\n:class:",Object(r.b)("inlineCode",{parentName:"p"},"~scrapy.settings.BaseSettings")," instance, the per-key priorities\nwill be used and the ",Object(r.b)("inlineCode",{parentName:"p"},"priority")," parameter ignored. This allows\ninserting/updating settings with different priorities with a single\ncommand."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"values"),": the settings names and values\n:type values: dict or string or :class:",Object(r.b)("inlineCode",{parentName:"p"},"~scrapy.settings.BaseSettings"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"priority"),": the priority of the settings. Should be a key of\n:attr:",Object(r.b)("inlineCode",{parentName:"p"},"~scrapy.settings.SETTINGS_PRIORITIES")," or an integer\n:type priority: str or int"))),Object(r.b)("h4",{id:"copy"},"copy"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"}," | copy()\n")),Object(r.b)("p",null,"Make a deep copy of current settings."),Object(r.b)("p",null,"This method returns a new instance of the :class:",Object(r.b)("inlineCode",{parentName:"p"},"Settings")," class,\npopulated with the same values and their priorities."),Object(r.b)("p",null,"Modifications to the new object won","'","t be reflected on the original\nsettings."),Object(r.b)("h4",{id:"freeze"},"freeze"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"}," | freeze()\n")),Object(r.b)("p",null,"Disable further changes to the current settings."),Object(r.b)("p",null,"After calling this method, the present state of the settings will become\nimmutable. Trying to change values through the :meth:",Object(r.b)("inlineCode",{parentName:"p"},"~set")," method and\nits variants won","'","t be possible and will be alerted."),Object(r.b)("h4",{id:"frozencopy"},"frozencopy"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"}," | frozencopy()\n")),Object(r.b)("p",null,"Return an immutable copy of the current settings."),Object(r.b)("p",null,"Alias for a :meth:",Object(r.b)("inlineCode",{parentName:"p"},"~freeze")," call in the object returned by :meth:",Object(r.b)("inlineCode",{parentName:"p"},"copy"),"."),Object(r.b)("h4",{id:"copy_to_dict"},"copy","_","to","_","dict"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"}," | copy_to_dict()\n")),Object(r.b)("p",null,"Make a copy of current settings and convert to a dict."),Object(r.b)("p",null,"This method returns a new dict populated with the same values\nand their priorities as the current settings."),Object(r.b)("p",null,"Modifications to the returned dict won","'","t be reflected on the original\nsettings."),Object(r.b)("p",null,"This method can be useful for example for printing settings\nin Scrapy shell."),Object(r.b)("h2",{id:"settings-objects"},"Settings Objects"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"class Settings(BaseSettings)\n")),Object(r.b)("p",null,"This object stores Scrapy settings for the configuration of internal\ncomponents, and can be used for any further customization."),Object(r.b)("p",null,"It is a direct subclass and supports all methods of\n:class:",Object(r.b)("inlineCode",{parentName:"p"},"~scrapy.settings.BaseSettings"),". Additionally, after instantiation\nof this class, the new object will have the global default settings\ndescribed on :ref:",Object(r.b)("inlineCode",{parentName:"p"},"topics-settings-ref")," already populated."),Object(r.b)("h4",{id:"iter_default_settings"},"iter","_","default","_","settings"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"iter_default_settings()\n")),Object(r.b)("p",null,"Return the default settings as an iterator of (name, value) tuples"),Object(r.b)("h4",{id:"overridden_settings"},"overridden","_","settings"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"overridden_settings(settings)\n")),Object(r.b)("p",null,"Return a dict of the settings that have been overridden"))}o.isMDXComponent=!0},204:function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=i.a.createContext({}),o=function(e){var t=i.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):b(b({},t),e)),n},c=function(e){var t=o(e.components);return i.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=o(n),d=a,m=c["".concat(l,".").concat(d)]||c[d]||u[d]||r;return n?i.a.createElement(m,b(b({ref:t},p),{},{components:n})):i.a.createElement(m,b({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=d;var b={};for(var s in t)hasOwnProperty.call(t,s)&&(b[s]=t[s]);b.originalType=e,b.mdxType="string"==typeof e?e:a,l[1]=b;for(var p=2;p<r;p++)l[p]=n[p];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);