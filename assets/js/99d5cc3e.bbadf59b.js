(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{160:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return o})),t.d(r,"metadata",(function(){return i})),t.d(r,"toc",(function(){return c})),t.d(r,"default",(function(){return d}));var s=t(3),n=t(7),a=(t(0),t(204)),o={sidebar_label:"feed",title:"scrapy.spiders.feed"},i={unversionedId:"scrapy/scrapy/spiders/feed",id:"scrapy/scrapy/spiders/feed",isDocsHomePage:!1,title:"scrapy.spiders.feed",description:"This module implements the XMLFeedSpider which is the recommended spider to use",source:"@site/docs/scrapy/scrapy/spiders/feed.md",sourceDirName:"scrapy/scrapy/spiders",slug:"/scrapy/scrapy/spiders/feed",permalink:"/documentation-demo/docs/scrapy/scrapy/spiders/feed",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/scrapy/scrapy/spiders/feed.md",version:"current",sidebar_label:"feed",frontMatter:{sidebar_label:"feed",title:"scrapy.spiders.feed"},sidebar:"tutorialSidebar",previous:{title:"scrapy.spiders",permalink:"/documentation-demo/docs/scrapy/scrapy/spiders/__init__"},next:{title:"scrapy.spiders.init",permalink:"/documentation-demo/docs/scrapy/scrapy/spiders/init"}},c=[{value:"XMLFeedSpider Objects",id:"xmlfeedspider-objects",children:[]},{value:"CSVFeedSpider Objects",id:"csvfeedspider-objects",children:[]}],p={toc:c};function d(e){var r=e.components,t=Object(n.a)(e,["components"]);return Object(a.b)("wrapper",Object(s.a)({},p,t,{components:r,mdxType:"MDXLayout"}),Object(a.b)("p",null,"This module implements the XMLFeedSpider which is the recommended spider to use\nfor scraping from an XML feed."),Object(a.b)("p",null,"See documentation in docs/topics/spiders.rst"),Object(a.b)("h2",{id:"xmlfeedspider-objects"},"XMLFeedSpider Objects"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class XMLFeedSpider(Spider)\n")),Object(a.b)("p",null,"This class intends to be the base class for spiders that scrape\nfrom XML feeds."),Object(a.b)("p",null,"You can choose whether to parse the file using the ","'","iternodes","'"," iterator, an\n","'","xml","'"," selector, or an ","'","html","'"," selector.  In most cases, it","'","s convenient to\nuse iternodes, since it","'","s a faster and cleaner."),Object(a.b)("h4",{id:"process_results"},"process","_","results"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"}," | process_results(response, results)\n")),Object(a.b)("p",null,"This overridable method is called for each result (item or request)\nreturned by the spider, and it","'","s intended to perform any last time\nprocessing required before returning the results to the framework core,\nfor example setting the item GUIDs. It receives a list of results and\nthe response which originated that results. It must return a list of\nresults (items or requests)."),Object(a.b)("h4",{id:"adapt_response"},"adapt","_","response"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"}," | adapt_response(response)\n")),Object(a.b)("p",null,"You can override this function in order to make any changes you want\nto into the feed before parsing it. This function must return a\nresponse."),Object(a.b)("h4",{id:"parse_node"},"parse","_","node"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"}," | parse_node(response, selector)\n")),Object(a.b)("p",null,"This method must be overriden with your custom spider functionality"),Object(a.b)("h4",{id:"parse_nodes"},"parse","_","nodes"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"}," | parse_nodes(response, nodes)\n")),Object(a.b)("p",null,"This method is called for the nodes matching the provided tag name\n(itertag). Receives the response and an Selector for each node.\nOverriding this method is mandatory. Otherwise, you spider won","'","t work.\nThis method must return either an item, a request, or a list\ncontaining any of them."),Object(a.b)("h2",{id:"csvfeedspider-objects"},"CSVFeedSpider Objects"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class CSVFeedSpider(Spider)\n")),Object(a.b)("p",null,"Spider for parsing CSV feeds.\nIt receives a CSV file in a response; iterates through each of its rows,\nand calls parse_row with a dict containing each field","'","s data."),Object(a.b)("p",null,"You can set some options regarding the CSV file, such as the delimiter, quotechar\nand the file","'","s headers."),Object(a.b)("h4",{id:"process_results-1"},"process","_","results"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"}," | process_results(response, results)\n")),Object(a.b)("p",null,"This method has the same purpose as the one in XMLFeedSpider"),Object(a.b)("h4",{id:"adapt_response-1"},"adapt","_","response"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"}," | adapt_response(response)\n")),Object(a.b)("p",null,"This method has the same purpose as the one in XMLFeedSpider"),Object(a.b)("h4",{id:"parse_row"},"parse","_","row"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"}," | parse_row(response, row)\n")),Object(a.b)("p",null,"This method must be overriden with your custom spider functionality"),Object(a.b)("h4",{id:"parse_rows"},"parse","_","rows"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"}," | parse_rows(response)\n")),Object(a.b)("p",null,"Receives a response and a dict (representing each row) with a key for\neach provided (or detected) header of the CSV file.  This spider also\ngives the opportunity to override adapt_response and\nprocess_results methods for pre and post-processing purposes."))}d.isMDXComponent=!0},204:function(e,r,t){"use strict";t.d(r,"a",(function(){return l})),t.d(r,"b",(function(){return h}));var s=t(0),n=t.n(s);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);r&&(s=s.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,s)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,s,n=function(e,r){if(null==e)return{};var t,s,n={},a=Object.keys(e);for(s=0;s<a.length;s++)t=a[s],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)t=a[s],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var p=n.a.createContext({}),d=function(e){var r=n.a.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},l=function(e){var r=d(e.components);return n.a.createElement(p.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.a.createElement(n.a.Fragment,{},r)}},b=n.a.forwardRef((function(e,r){var t=e.components,s=e.mdxType,a=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=d(t),b=s,h=l["".concat(o,".").concat(b)]||l[b]||u[b]||a;return t?n.a.createElement(h,i(i({ref:r},p),{},{components:t})):n.a.createElement(h,i({ref:r},p))}));function h(e,r){var t=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=b;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var p=2;p<a;p++)o[p]=t[p];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);